{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/darren1208/Documents/GitHub/timeflex/src/App.js\";\nimport React from 'react';\nimport { Navbar, Nav, NavDropdown, Button } from 'react-bootstrap';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { INITIAL_EVENTS, createEventId } from './event-utils';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weekendsVisible: true,\n      currentEvents: []\n    };\n  }\n\n}\n\nhandleWeekendsToggle = () => {\n  this.setState({\n    weekendsVisible: !this.state.weekendsVisible\n  });\n};\n\nhandleDateSelect = selectInfo => {\n  let title = prompt('Please enter a new title for your event');\n  let calendarApi = selectInfo.view.calendar;\n  calendarApi.unselect(); // clear date selection\n\n  if (title) {\n    calendarApi.addEvent({\n      id: createEventId(),\n      title,\n      start: selectInfo.startStr,\n      end: selectInfo.endStr,\n      allDay: selectInfo.allDay\n    });\n  }\n};\n\nhandleEventClick = clickInfo => {\n  if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n    clickInfo.event.remove();\n  }\n};\n\nhandleEvents = events => {\n  this.setState({\n    currentEvents: events\n  });\n};\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: eventInfo.timeText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: eventInfo.event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/darren1208/Documents/GitHub/timeflex/src/App.js"],"names":["React","Navbar","Nav","NavDropdown","Button","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","App","Component","state","weekendsVisible","currentEvents","handleWeekendsToggle","setState","handleDateSelect","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","id","start","startStr","end","endStr","allDay","handleEventClick","clickInfo","confirm","event","remove","handleEvents","events","renderEventContent","eventInfo","timeText"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,WAAtB,EAAmCC,MAAnC,QAAiD,iBAAjD;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,qBAAzC;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,eAA9C;;AAGA,MAAMC,GAAN,SAAkBZ,KAAK,CAACa,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE9BC,KAF8B,GAEtB;AACJC,MAAAA,eAAe,EAAE,IADb;AAEJC,MAAAA,aAAa,EAAE;AAFX,KAFsB;AAAA;;AAAA;;AASlCC,oBAAoB,GAAG,MAAM;AACzB,OAAKC,QAAL,CAAc;AACVH,IAAAA,eAAe,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADnB,GAAd;AAGH,CAJD;;AAMAI,gBAAgB,GAAIC,UAAD,IAAgB;AAC/B,MAAIC,KAAK,GAAGC,MAAM,CAAC,yCAAD,CAAlB;AACA,MAAIC,WAAW,GAAGH,UAAU,CAACI,IAAX,CAAgBC,QAAlC;AAEAF,EAAAA,WAAW,CAACG,QAAZ,GAJ+B,CAIR;;AAEvB,MAAIL,KAAJ,EAAW;AACPE,IAAAA,WAAW,CAACI,QAAZ,CAAqB;AACjBC,MAAAA,EAAE,EAAEjB,aAAa,EADA;AAEjBU,MAAAA,KAFiB;AAGjBQ,MAAAA,KAAK,EAAET,UAAU,CAACU,QAHD;AAIjBC,MAAAA,GAAG,EAAEX,UAAU,CAACY,MAJC;AAKjBC,MAAAA,MAAM,EAAEb,UAAU,CAACa;AALF,KAArB;AAOH;AACJ,CAfD;;AAiBAC,gBAAgB,GAAIC,SAAD,IAAe;AAC9B,MAAIC,OAAO,CAAE,8CAA6CD,SAAS,CAACE,KAAV,CAAgBhB,KAAM,GAArE,CAAX,EAAqF;AACjFc,IAAAA,SAAS,CAACE,KAAV,CAAgBC,MAAhB;AACH;AACJ,CAJD;;AAMAC,YAAY,GAAIC,MAAD,IAAY;AACvB,OAAKtB,QAAL,CAAc;AACVF,IAAAA,aAAa,EAAEwB;AADL,GAAd;AAGH,CAJD;;AAOA,SAASC,kBAAT,CAA4BC,SAA5B,EAAuC;AACnC,sBACI;AAAA,4BACI;AAAA,gBAAIA,SAAS,CAACC;AAAd;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAID,SAAS,CAACL,KAAV,CAAgBhB;AAApB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAMH;;AAED,eAAeT,GAAf","sourcesContent":["import React from 'react';\nimport { Navbar, Nav, NavDropdown, Button } from 'react-bootstrap';\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\n\n\nclass App extends React.Component {\n\n    state = {\n        weekendsVisible: true,\n        currentEvents: []\n    }\n\n}\n\nhandleWeekendsToggle = () => {\n    this.setState({\n        weekendsVisible: !this.state.weekendsVisible\n    })\n}\n\nhandleDateSelect = (selectInfo) => {\n    let title = prompt('Please enter a new title for your event')\n    let calendarApi = selectInfo.view.calendar\n\n    calendarApi.unselect() // clear date selection\n\n    if (title) {\n        calendarApi.addEvent({\n            id: createEventId(),\n            title,\n            start: selectInfo.startStr,\n            end: selectInfo.endStr,\n            allDay: selectInfo.allDay\n        })\n    }\n}\n\nhandleEventClick = (clickInfo) => {\n    if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove()\n    }\n}\n\nhandleEvents = (events) => {\n    this.setState({\n        currentEvents: events\n    })\n}\n\n\nfunction renderEventContent(eventInfo) {\n    return (\n        <>\n            <b>{eventInfo.timeText}</b>\n            <i>{eventInfo.event.title}</i>\n        </>\n    )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}